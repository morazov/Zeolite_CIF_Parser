import pandas as pd
import numpy as np
import os

# This script takes XYZ-type data and searches for Si-O bonds based on distance

# Please cite the crystallographic data source if you wish to use the data:
# Ch. Baerlocher and L.B. McCusker
# Database of Zeolite Structures: http://www.iza-structure.org/databases/

# Process all files generated by crystal_CIF_to_XYZ.py script to find all Si-O
# bonds
path = "./XYZs"
dir_list = os.listdir(path)
for file in dir_list:
    # Load the x,y,z positions and atom type into a dataframe
    si_o_df = pd.read_csv(f"./XYZs/{file}")
    # Add bonded atoms, and bond ends columns to keep track of connectivity
    # This holds the indices of other atoms bonded to a given atom
    si_o_df['Bonded Atoms'] = ''
    # This holds the positions of O's bonded to Si's. Empty for O atoms.
    si_o_df['Bond Ends'] = ''
    # Find the Si and O atoms in df
    si_index = si_o_df['Atom'] == "Si"
    o_index = si_o_df['Atom'] == "O"
    # Convert all O coordinates to numpy for faster computation
    o_xyz_all = si_o_df.loc[o_index, ['x', 'y', 'z']].to_numpy()
    # Set bond length threshold. For Si-O, 1.9 angstrom is a good starting
    # point. Using the square here to avoid taking a root later.
    bond_threshold = 1.9**2
    # Loop through the Si atoms to find Si-O bonds
    for si in si_index[si_index].index:
        # For the given Si atom, get its position and subtract from all O's
        # then square and sum to get the square of the Eucledian distance.
        si_xyz = si_o_df.loc[si, ['x', 'y', 'z']].to_numpy()
        o_si_pairs = np.sum((o_xyz_all-si_xyz)
                            ** 2, axis=1) < bond_threshold
        # Get the indices of the bonded O's. Note: not the "positions" indices
        o_bonds, = np.where(o_si_pairs)
        bond_ends = o_xyz_all[o_bonds]

        # Reformat data storage format for easier parsing in Unity/C#
        bond_ends = np.array2string(bond_ends, separator=';')
        # Get the XYZ positions of the bonded O's
        si_o_df.loc[si, 'Bond Ends'] = bond_ends.replace(
            '[', '').replace(']', '').replace('\n', 'N')
        o_bonds = o_index[o_index].iloc[o_bonds].index.tolist()
        o_bonds_str = [str(x) for x in o_bonds]
        bonded_atoms = ';'.join(o_bonds_str)
        si_o_df.loc[si, 'Bonded Atoms'] = ';'.join(o_bonds_str)
        si_o_df.loc[o_bonds, 'Bonded Atoms'] = si_o_df\
            .loc[o_bonds, 'Bonded Atoms'].apply(lambda x: x+str(si)+';')
    # Store the results for use with cycle search or for bond/wireframe
    # represenation of the framework
    si_o_df.to_csv(f"./FrameworkBonds/{file[:-4]}.csv", index=False)
